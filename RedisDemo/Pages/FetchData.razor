@page "/fetchdata"

@using RedisDemo.Data
@using RedisDemo.Helpers

@inject WeatherForecastService ForecastService
@inject IDistributedCache cache

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button class="btn btn-primary" @onclick="LoadForecastData">Load Data</button>
 
@if (forecasts is null && loadedFrom is null)
{
    <p><em>Load data, please</em></p>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="h3 @isDataCached">
        @loadedFrom
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private string loadedFrom = null;
    private string isDataCached = "";

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task LoadForecastData()
    {
        forecasts = null;

        loadedFrom = null;

        string dateFormat = "yyyyMMdd_hhmm";
        string key = "WeatherForecast_" + DateTime.Now.ToString(dateFormat);

        forecasts = await cache.GetRecordAsync<WeatherForecast[]>(key);

        if (forecasts != null)
        {
            loadedFrom = $"Loaded from cache with key {key}";
            isDataCached = "text-success";
            return;
        }

        isDataCached = "";

        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        loadedFrom = $"Loaded from API at {DateTime.Now}";

        await cache.SetRecordAsync(key, forecasts);

        isDataCached = "text-danger";
    }
}
